var console = (function(){
    var persistent = [[NSThread mainThread] threadDictionary];
    var console = persistent.console || '';;

    function logWindows(){
        var window = persistentPanel('Console', 'LogWindow', function(window) {
            var scrollview = [[NSScrollView alloc] initWithFrame:[[window contentView] frame]];
            var contentSize = [scrollview contentSize];

            [scrollview setBorderType:NSNoBorder];
            [scrollview setHasVerticalScroller:true];
            [scrollview setHasHorizontalScroller:true];
            [scrollview setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];

            var FLT_MAX = 3.40282347e+38;
            var view = [[NSTextView alloc] initWithFrame:NSMakeRect(0, 0, contentSize.width, contentSize.height)];
            [view setMinSize:NSMakeSize(0.0, contentSize.height)];
            [view setMaxSize:NSMakeSize(FLT_MAX, FLT_MAX)];
            [view setVerticallyResizable:true];
            [view setHorizontallyResizable:true];
            [view setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
            [[view textContainer] setContainerSize:NSMakeSize(FLT_MAX, FLT_MAX)];
            [[view textContainer] setWidthTracksTextView:false];

            [scrollview setDocumentView:view];
            [window setContentView:scrollview];
            [window makeFirstResponder:view];
        });

        return window;
    }

    function makePanel(title, autosave, setup) {
        var frame = NSMakeRect(0,0,512,128);
        var mask = NSTitledWindowMask + NSClosableWindowMask + NSMiniaturizableWindowMask + NSResizableWindowMask + NSUtilityWindowMask;
        var window = [[NSPanel alloc] initWithContentRect:frame styleMask:mask backing:NSBackingStoreBuffered defer:true];
        window.title = title;
        window.floatingPanel = true;
        [window setFrameAutosaveName:autosave];

        setup(window);

        [window setReleasedWhenClosed:false];
        [window makeKeyAndOrderFront:nil];

        return window;
    }

    function persistentPanel(title, persistName, setup) {
        var window = persistent[persistName];
        if (window == null) {
            window = makePanel(title, persistName, setup);
            persistent[persistName] = window;
        }

        return window;
    }

    return {
        log: function(msg){
            var logWindow = logWindows();
            var time = new Date().toString().split(' ')[4];
            var view = logWindow.contentView().documentView();

            if(Object.prototype.toString.call(msg) == '[object Array]'){
                msg = msg.join(', ');
            }

            if(Object.prototype.toString.call(msg) == '[object Object]'){
                msg = JSON.stringify(msg);
            }

            console = console +'['+ time +']' + ' '+ msg + '\n';
            logWindow.makeKeyAndOrderFront(nil);

            log(msg);
            view.setString(console);
            log(msg);
            persistent.console = console;
            view.scrollRangeToVisible(NSMakeRange(view.string.length, 0));
            [[view textStorage] setFont:[NSFont fontWithName:@"Consolas" size:11]];
        },
        clear: function(){
            var logWindow = logWindows();
            var view = logWindow.contentView().documentView();
            
            logWindow.makeKeyAndOrderFront(nil);

            console = '';
            view.setString('');
        }
    }
})();

var util = {
    //获取文字图层字体样式
    getFontWeight: function(font){
        var fontManager = [NSFontManager sharedFontManager];
        var weight = fontManager.weightOfFont(font);
        return weight > 7 ? '700': null;
    },

    //字体对齐方式
    getTextAlign: function(layer){
        var align = ['left','right','center','justify'];
        return align[layer.textAlignment()] ? align[layer.textAlignment()] : null;
    },

    //转换版本号
    convertVersion: function(version){
        return parseFloat(version.match(/\d/gi).join(''), 10);
    },

    /*
     * 消息提示
     * obj.title
     * obj.content
     */
    showTips: function(obj){
        var title = obj.title || 'Marketch';
        var app = [NSApplication sharedApplication];

        [app displayDialog:obj.content withTitle:title];
    },

    //从网络同步加载json数据
    getJSON: function(url){
        var url = [NSURL URLWithString:url];
        var request = [NSMutableURLRequest requestWithURL:url];
        var response = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:nil];
        var result = [NSJSONSerialization JSONObjectWithData:response options:nil error:nil];
        return result;
    },

    I18N: (function(){
        var defs = [NSUserDefaults standardUserDefaults];
        var languages = [[defs objectForKey:@"AppleLanguages"] objectAtIndex:0];
        //多语言配置
        var I18N = {
            'zh-cn': {
                'language': 'cn',
                'EXPORT': '导出',
                'EXPORTTO': '导出到：',
                'NOARTBOARD': '没有选择任何画板',
                'EXPORTSUCCESS': '打包导出成功',
                'EXPORTFAIL': '打包导出失败',
                'NEWVERSION': '发现版本，从Toolbox中删除后重新安装可以获取新版本',
                'LAETVERSION': '已经是最新版本了',
                'NETERROR': '无法访问更新服务器，请稍后再试',
                'SELECTEXPORTARTBOARD': '请选择要导出的画板',
                'SELECTEDARTBOARD': '当前选中的画板',
                'ARTBOARDONPAGE': '当前页面上的全部画板',
                'ALLARTBOARD': '所有画板(会比较慢)',
                'EXPORTEVERYLAYER': '把每个图层作为图片导出',
                'CONFIRM': '确认',
                'CANCEl': '取消',
                //预览页面多语言
                'MarketchPreview': {
                    'UNIT': '单位',
                    'SIZE': '尺寸',
                    'SHOWSLICE': '显示切片',
                    'DRAGTOSAVE': '右键或拖拽到桌面保存',
                    'WIDTH': '宽',
                    'HEIGHT': '高',
                    'BORDER': '边框',
                    'COLOR': '颜色',
                    'FILLCOLOR': '填充色',
                    'RADIUS': '圆角',
                    'LAYERTEXT': '图层内容',
                    'CODE': '代码',
                    'EXPORT': '导出',
                    'FORMAT': '格式',
                    'EXPORTLAYER': '导出选中图层',
                    'COPYSUCCESS': '复制成功'
                }
            },
            'en': {
                'language': 'en',
                'EXPORT': 'Export',
                'EXPORTTO': 'Export to',
                'NOARTBOARD': 'No artboards found.',
                'EXPORTSUCCESS': 'Export success.',
                'EXPORTFAIL': 'Export fail.',
                'NEWVERSION': 'Marketch has new version. Please reinstalling form sketch toolbox.',
                'LAETVERSION': 'is currently the newest version available.',
                'NETERROR': 'Service is not available.',
                'SELECTEXPORTARTBOARD': 'Please selected Artboard.',
                'SELECTEDARTBOARD': 'Selection Artboard',
                'ARTBOARDONPAGE': 'Artboard on current page',
                'ALLARTBOARD': 'All Artboard',
                'EXPORTEVERYLAYER': 'Export all layers as image',
                'CONFIRM': 'Confirm',
                'CANCEl': 'Cancel',
                //预览页面多语言
                'MarketchPreview': {
                    'UNIT': 'Unit',
                    'SIZE': 'Size',
                    'SHOWSLICE': 'Show slice',
                    'DRAGTOSAVE': 'Drag to desktop for save.',
                    'WIDTH': 'Width',
                    'HEIGHT': 'Height',
                    'BORDER': 'Border',
                    'COLOR': 'color',
                    'FILLCOLOR': 'Fill',
                    'RADIUS': 'Radius',
                    'LAYERTEXT': 'Content',
                    'CODE': 'Code',
                    'EXPORT': 'Export',
                    'FORMAT': 'Format',
                    'EXPORTLAYER': 'Export Activity Layer',
                    'COPYSUCCESS': 'Copy Success'
                }
            }
        }

        //获取到语言后重新设置I18N变量，以简化操作
        if(languages != 'zh-Hans'){
            return I18N['en'];
        }else{
            return I18N['zh-cn'];
        }
    })(),

    /**
     * 查看OC对象成员
     * @param layer {object} 图层对象
     * @param type {string} 查看类型。可选值：
     *      class: 查看图层继承链
     *      method: 查看图层类方法&&实例方法
     *      property: 查看图层属性
     *      protoco: 查看图层协议;
     * @return Array
     */
    getMembersOfOC: function(layer, type){
        var result = NSMutableArray.array();
        var desc = [[MOClassDescription alloc] initWithClass:[layer class] registered:nil];

        switch(type){
            default:
            case 'class':
                //继承链
                result.addObjectsFromArray(desc.ancestors());
                break;
            case 'method':
                //类方法（classMethodsWithAncestors）
                result.addObjectsFromArray(desc.classMethodsWithAncestors());
                //实例方法（instanceMethods）
                result.addObjectsFromArray(desc.instanceMethodsWithAncestors());
                break;
            case 'property':
                //属性（propertiesWithAncestors）
                result.addObjectsFromArray(desc.properties());
                break;
            case 'protoco':
                //协议（protocolsWithAncestors）
                result.addObjectsFromArray(desc.protocols());
                break;
        }
        return result;
    },

    //NSString to js string
    toJSString: function(NSStr){
        return new String(encodeURI(trim(NSStr))).toString();
    },

    //打包文件
    zipFile: function(zipFile, destination){
        var zipTask = [[NSTask alloc] init];

        [zipTask setLaunchPath:@'/usr/bin/ditto'];
        //zip参数
        [zipTask setArguments:[NSArray arrayWithObjects: @"-c", @"-k", @"-X", @"--rsrc", zipFile, destination, nil]];

        [zipTask launch];
        [zipTask waitUntilExit];

        if ([zipTask terminationStatus] != 0){
            //task执行失败
            return false;
        }else{
            //task执行成功
            return true;
        }
    },

    /**
     * 获取图层数据
     * @param layer 目标图层
     * @param config.type 图层类型
     * @param config.zIndex 
     * @return object
     */
    getLayerData: function(layer, config){
        //图层在画板中的位置、尺寸：frameInArtboard
        var layerFrame = layer.frameInArtboard();
        //图层基本信息
        var layerData = {
            'id': util.toJSString(layer.objectID()),
            //图层路径默认与图层id一致
            src: util.toJSString(layer.objectID()),
            name: util.toJSString(layer.name()),
            x: Math.ceil(layerFrame.origin.x),
            y: Math.ceil(layerFrame.origin.y),
            zIndex: config.zIndex,
            width: Math.ceil(layerFrame.size.width),
            height: Math.ceil(layerFrame.size.height)
        };

        //修正边框对图形、位图的位置影响
        if(config.type == 'shape' || config.type == 'bitmap'){
            var border = layer.style().borders().firstObject();
            var borderWidth = null;

            if(border && border.isEnabled()){
                borderWidth = border.thickness();

                //边框位置为center
                if(border.position() == 0){
                    //补偿坐标
                    layerData.x = layerData.x - parseInt(borderWidth/2, 10);
                    layerData.y = layerData.y - parseInt(borderWidth/2, 10);
                    //补偿尺寸
                    layerData.width = layerData.width + borderWidth;
                    layerData.height = layerData.height + borderWidth;
                }
                //边框位置为outside
                if(border.position() == 2){
                    //补偿坐标
                    layerData.x = layerData.x - borderWidth;
                    layerData.y = layerData.y - borderWidth;
                    //补偿尺寸
                    layerData.width = layerData.width + (borderWidth * 2);
                    layerData.height = layerData.height + (borderWidth * 2);
                }
            }
        }

        //对于画板、slice、位图只需要返回基本数据
        if(config.type == 'artboard' || config.type == 'slice' || config.type == 'bitmap'){
            return layerData;
        }

        //文字图层
        if(config.type == 'text'){
            var layerFont = layer.font();
            var textAlign = util.getTextAlign(layer);
            var fontWeight = util.getFontWeight(layerFont);
            var fontStyle = layer.style();

            //文字内容
            layerData.html = util.toJSString(layer.stringValue());
            layerData.style = util.filterSketchCss(layer.CSSAttributes());

            //修正文字图层设置填充后颜色不正确的问题
            if(fontStyle.hasEnabledFill()){
                var fillColor = layer.style().fill().CSSAttributeString().split(':');
                if(fillColor.length > 1){
                    layerData.style.color = util.trim(fillColor[1]);
                }
            }

            if(textAlign){
                layerData.style['text-align'] = textAlign;
            }
            if(fontWeight){
                layerData.style['font-weight'] = fontWeight;
            }

            return layerData;
        }

        //图形
        if(config.type == 'shape'){
            var shapeClassName = layer.layers().firstObject().className();
            layerData.style = util.filterSketchCss(layer.CSSAttributes());

            layerData.style.width = layerData.width +'px';
            layerData.style.height = layerData.height +'px';

            //从css中复制一份圆角（给设计师看）
            if(layerData.style['border-radius']){
                layerData.radius = layerData.style['border-radius'].replace(/[^\d\.]/gi, '');
            }

            //从css中复制一份背景色（给设计师看）
            if(layerData.style['background']){
                layerData.background = layerData.style['background'];
            }
            
            //正圆形（长宽误差2px以内）补充borderRadius属性
            if(shapeClassName == 'MSOvalShape' && Math.abs(layerData.width - layerData.height) <= 2){
                layerData.style['border-radius'] = '100%';
            }

            return layerData;
        }
    },

    trim: function(str){
        return str.replace(/(^\s+|\s+$)/g, '');
    },

    //处理系统生成的css，返回js object
    filterSketchCss: function(cssAttrs){
        var style = {};
        for(var i=0,len=cssAttrs.count();i<len;i++){
            var cssAttr = util.toJSString(cssAttrs.objectAtIndex(i));
            if(!cssAttr.match(/^\/\*.*?\*\/$/g)){
                cssAttr = cssAttr.split(':');
                style[util.trim(cssAttr[0])] = util.trim(cssAttr[1].replace(';', ''))
            }
        }
        return style;
    }
}
